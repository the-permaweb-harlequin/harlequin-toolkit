name: Stable Release

on:
  push:
    tags:
      - 'v*'
      - 'cli-v*'
      - 'sdk-v*'
      - 'app-v*'
      - 'server-v*'

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: false

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      cli: ${{ steps.changes.outputs.cli }}
      sdk: ${{ steps.changes.outputs.sdk }}
      app: ${{ steps.changes.outputs.app }}
      server: ${{ steps.changes.outputs.server }}
      tag_type: ${{ steps.tag-info.outputs.type }}
      version: ${{ steps.tag-info.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag info
        id: tag-info
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          # Skip alpha releases in stable workflow
          if [[ $TAG == *-alpha.* ]]; then
            echo "is_alpha=true" >> $GITHUB_OUTPUT
            echo "type=skip" >> $GITHUB_OUTPUT
            echo "version=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "is_alpha=false" >> $GITHUB_OUTPUT
          
          if [[ $TAG == cli-v* ]]; then
            echo "type=cli" >> $GITHUB_OUTPUT
            echo "version=${TAG#cli-v}" >> $GITHUB_OUTPUT
          elif [[ $TAG == sdk-v* ]]; then
            echo "type=sdk" >> $GITHUB_OUTPUT
            echo "version=${TAG#sdk-v}" >> $GITHUB_OUTPUT
          elif [[ $TAG == app-v* ]]; then
            echo "type=app" >> $GITHUB_OUTPUT
            echo "version=${TAG#app-v}" >> $GITHUB_OUTPUT
          elif [[ $TAG == server-v* ]]; then
            echo "type=server" >> $GITHUB_OUTPUT
            echo "version=${TAG#server-v}" >> $GITHUB_OUTPUT
          else
            echo "type=all" >> $GITHUB_OUTPUT
            echo "version=${TAG#v}" >> $GITHUB_OUTPUT
          fi

      - name: Detect changes
        id: changes
        run: |
          # Skip if this is an alpha release
          if [[ "${{ steps.tag-info.outputs.type }}" == "skip" ]]; then
            echo "cli=false" >> $GITHUB_OUTPUT
            echo "sdk=false" >> $GITHUB_OUTPUT
            echo "app=false" >> $GITHUB_OUTPUT
            echo "server=false" >> $GITHUB_OUTPUT
            echo "⚠️ Skipping alpha release in stable workflow"
          elif [[ "${{ steps.tag-info.outputs.type }}" == "all" ]]; then
            echo "cli=true" >> $GITHUB_OUTPUT
            echo "sdk=false" >> $GITHUB_OUTPUT  # Disabled for now
            echo "app=false" >> $GITHUB_OUTPUT  # Disabled for now
            echo "server=false" >> $GITHUB_OUTPUT  # Disabled for now
          else
            echo "cli=${{ steps.tag-info.outputs.type == 'cli' }}" >> $GITHUB_OUTPUT
            echo "sdk=false" >> $GITHUB_OUTPUT  # Disabled - only CLI releases active
            echo "app=false" >> $GITHUB_OUTPUT  # Disabled - only CLI releases active
            echo "server=false" >> $GITHUB_OUTPUT  # Disabled - only CLI releases active
          fi

  release-cli:
    needs: detect-changes
    if: needs.detect-changes.outputs.cli == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.x'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: yarn

      - name: Setup GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          install-only: true

      - name: Validate GoReleaser config
        run: npx nx goreleaser-check cli

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --config ./cli/.goreleaser.yaml
          workdir: ./
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Arweave
        run: |
          cd cli/scripts
          yarn
          yarn deploy
        env:
          ARWEAVE_WALLET_JWK: ${{ secrets.ARWEAVE_WALLET_JWK }}
          CLI_VERSION: ${{ needs.detect-changes.outputs.version }}

      - name: Test installation script
        run: |
          echo "Testing installation script with new release..."
          # Test that the install script can detect the new version
          curl -fsSL https://install_cli_harlequin.daemongate.io | DRYRUN=true sh

  release-sdk:
    needs: detect-changes
    if: false  # Disabled - SDK releases not implemented yet
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn

      - name: Build SDK
        run: npx nx build sdk

      - name: Update SDK version
        run: |
          cd dist/sdk
          npm version ${{ needs.detect-changes.outputs.version }} --no-git-tag-version

      - name: Publish to npm
        run: |
          cd dist/sdk
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release-app:
    needs: detect-changes
    if: false  # Disabled - App releases not implemented yet
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: yarn

      - name: Build App
        run: npx nx build app --configuration=production

      - name: Deploy App
        run: |
          echo "Deploying app..."
          # Add your deployment logic here (Vercel, Netlify, etc.)

  release-server:
    needs: detect-changes
    if: false  # Disabled - Server releases not implemented yet
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: yarn

      - name: Build Server
        run: npx nx build server

      - name: Build Docker image
        run: |
          docker build -t harlequin-server:${{ needs.detect-changes.outputs.version }} .
          
      - name: Deploy Server
        run: |
          echo "Deploying server..."
          # Add your deployment logic here


