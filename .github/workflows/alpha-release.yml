name: Alpha Release

on:
  push:
    branches:
      - develop
    paths:
      - 'cli/**'
      - '.github/workflows/alpha-release.yml'

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: false

jobs:
  alpha-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.x'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn

      - name: Setup GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          install-only: true

      - name: Generate alpha version
        id: alpha-version
        run: |
          # Get the latest stable tag to determine base version
          LATEST_TAG=$(git describe --tags --abbrev=0 --match="cli-v*" 2>/dev/null | grep -v "alpha" || echo "cli-v0.0.0")
          BASE_VERSION=${LATEST_TAG#cli-v}
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
          
          # Increment minor version for next alpha series
          NEXT_MINOR=$((MINOR + 1))
          NEXT_VERSION="${MAJOR}.${NEXT_MINOR}.0"
          
          # Get existing alpha count for this next version
          ALPHA_COUNT=$(git tag -l "cli-v${NEXT_VERSION}-alpha.*" | wc -l | tr -d ' ')
          NEXT_ALPHA=$((ALPHA_COUNT + 1))
          
          ALPHA_VERSION="${NEXT_VERSION}-alpha.${NEXT_ALPHA}"
          ALPHA_TAG="cli-v${ALPHA_VERSION}"
          
          echo "base_version=${BASE_VERSION}" >> $GITHUB_OUTPUT
          echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
          echo "alpha_version=${ALPHA_VERSION}" >> $GITHUB_OUTPUT
          echo "alpha_tag=${ALPHA_TAG}" >> $GITHUB_OUTPUT
          
          echo "ðŸŽ­ Latest stable: ${BASE_VERSION}"
          echo "ðŸŽ­ Generated alpha version: ${ALPHA_VERSION}"

      - name: Create alpha tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.alpha-version.outputs.alpha_tag }}
          git push origin ${{ steps.alpha-version.outputs.alpha_tag }}

      - name: Validate GoReleaser config
        run: npx nx goreleaser-check cli

      - name: Run GoReleaser (Alpha)
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --config ./cli/.goreleaser.yaml
          workdir: ./
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Arweave
        run: |
          cd cli/scripts
          yarn
          yarn deploy
        env:
          ARWEAVE_WALLET_JWK: ${{ secrets.ARWEAVE_WALLET_JWK }}
          CLI_VERSION: ${{ steps.alpha-version.outputs.alpha_version }}

      - name: Test alpha installation
        run: |
          echo "Testing alpha installation..."
          # Test alpha version install
          curl -fsSL https://install_cli_harlequin.daemongate.io | VERSION=${{ steps.alpha-version.outputs.alpha_version }} DRYRUN=true sh

      - name: Comment on PR (if exists)
        uses: actions/github-script@v7
        if: github.event_name == 'push'
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:develop`,
              state: 'open'
            });
            
            if (prs.length > 0) {
              const pr = prs[0];
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `ðŸŽ­ **Alpha Release Available!**
                
                Version: \`${{ steps.alpha-version.outputs.alpha_version }}\`
                
                **Test it:**
                \`\`\`bash
                # Install alpha version
                curl -fsSL https://install_cli_harlequin.daemongate.io | VERSION=${{ steps.alpha-version.outputs.alpha_version }} sh
                
                # Or dry run first
                curl -fsSL https://install_cli_harlequin.daemongate.io | VERSION=${{ steps.alpha-version.outputs.alpha_version }} DRYRUN=true sh
                \`\`\`
                
                **GitHub Release:** https://github.com/${{ github.repository }}/releases/tag/${{ steps.alpha-version.outputs.alpha_tag }}`
              });
            }
